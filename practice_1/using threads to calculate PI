#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define numero_de_threads 16

int puntos = 100000;
int circulo = 0;
double radius=1;
pthread_mutex_t lock;
int puntos_Thread;

unsigned int punto;

double r2(){
    return (double)rand_r(&punto) / (double)((unsigned)RAND_MAX + 1);
}

int entrada_circulo(double x, double y){

    double d = (radius*radius) -( (x*x) + (y*y));

    if(d>=0){
        return 1;
    }else{
        return 0;
    }
}

void * Count(void * a){
    int cont=0;
    pthread_mutex_lock(&lock);
    int j;
    for (j=1; j<=puntos_Thread; j++){
        double xcoordinate = r2();
        double ycoordinate = r2();
        int circ=entrada_circulo(xcoordinate,ycoordinate);
        if (circ==1) {
            circulo = circulo + 1;
        }else{
        cont++;
        }
    }
    pthread_mutex_unlock(&lock);
     return NULL;
}

int main(int argc, char *argv[]){
    clock_t start, end;
    double cpu_time_used;

    start = clock();
    if (pthread_mutex_init(&lock, NULL) != 0){
        printf("\n mutex init failed\n");
            return 1;
    }
    punto= time(NULL);
    pthread_t threads[numero_de_threads];
   puntos_Thread= puntos/numero_de_threads;

    int i,i2;
    for(i=0; i<numero_de_threads; i++){
        pthread_create(&threads[i], NULL, Count, NULL);
    }

    for(i2=0; i2<numero_de_threads; i2++){
        pthread_join(threads[i2], NULL);
    }
    double PI = 4.0*(double)circulo/(double)puntos;
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("PI = %f\nTime used=%f",PI, cpu_time_used);
    pthread_mutex_destroy(&lock);
}
