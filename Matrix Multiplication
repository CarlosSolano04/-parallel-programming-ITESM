#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <omp.h>
#define N 1000

int A[N][N];
int B[N][N];
int C[N][N];

int main(int argc, char** argv)
{
    int i,j,k,suma;
    int threadscnt =1;
        if (argc>1){
        threadscnt = atoi(argv[1]);
    }
    omp_set_num_threads(threadscnt);
    printf("OMP DEFINED, THREADCT = %d\n",threadscnt);
    for (i=0; i<N; i++)
        for(j=0; j<N; j++){
            A[i][j]=rand() % 101;
            B[i][j]=rand() % 101;
    }
    #pragma omp parallel for private(i,j,k) shared(A,B,C)
    for (i=0; i<N; i++) {
        for(j=0; j<N; j++) {
        suma = 0;
            for(k=0; k<N; k++){
                suma = suma + A[i][k] * B[k][j];
            }
        C[i][j] = suma;
        }
    }
/* Esta parte del código esta comentada para obtener una mejor corrida del programa
las líneas inferiores son la impresión de las tres matrices, las cuales fueron utilizadas
para la comprobación de la multiplicación de matrices.
    for ( i= 0 ; i < N ; i++ )
        {
            for ( j = 0 ; j < N ; j++ )
                printf("%d\t", A[i][j]);

            printf("\n");
        }
    for ( i= 0 ; i < N ; i++ )
        {
            for ( j = 0 ; j < N ; j++ )
                printf("%d\t", B[i][j]);

            printf("\n");
        }
    for ( i= 0 ; i < N ; i++ )
        {
            for ( j = 0 ; j < N ; j++ )
                printf("%d\t", C[i][j]);

            printf("\n");
        }
*/
    return 0;
}
